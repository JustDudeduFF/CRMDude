import { onValue, ref, update, get } from 'firebase/database';
import React, { useEffect, useState } from 'react';
import { db } from '../../FirebaseConfig';
import { useNavigate } from 'react-router-dom';

export default function TicketTable() {
  const username = localStorage.getItem('susbsUserid');
  const navigate = useNavigate();

  const ticketRef = ref(db, `Subscriber/${username}/Tickets`);
  const [arrayticket, setArrayTicket] = useState([]);

  useEffect(() => {
    // Fetch all user data once and store in a lookup object
    const usersRef = ref(db, `users`);

    get(usersRef).then((userSnap) => {
      const usersLookup = {};
      userSnap.forEach((childSnap) => {
        const userId = childSnap.key;
        const { fullname } = childSnap.val();
        usersLookup[userId] = fullname || 'Unknown User'; // Store userId -> fullname mapping
      });

      // Fetch ticket data
      const fetchTickets = onValue(ticketRef, (ticketSnap) => {
        if (ticketSnap.exists()) {
          const ticketArray = [];

          ticketSnap.forEach((Childticket) => {
            const ticketno = Childticket.val().ticketno;
            const source = Childticket.val().source;
            const ticketconcern = Childticket.val().ticketconcern;
            const assignto = Childticket.val().assignto; // This is the userId of the assigned person
            const description = Childticket.val().description;
            const assigntime = Childticket.val().assigntime;
            const assigndate = Childticket.val().assigndate;
            const status = Childticket.val().status;
            const closeby = Childticket.val().closeby;
            const closetime = Childticket.val().closetime;
            const closedate = Childticket.val().closedate;
            const rac = Childticket.val().rac;

            // Replace assignto with the user's full name from the usersLookup
            const assignedPersonName = usersLookup[assignto] || 'Not Assigned';
            const closePersonName = usersLookup[closeby] || closeby; // Fallback if not found
            
            ticketArray.push({
              ticketno,
              source,
              ticketconcern,
              assignto: assignedPersonName, // Store the name instead of userId
              description,
              assigntime,
              assigndate,
              status,
              closeby: closePersonName,
              closetime,
              closedate,
              rac,
            });
          });
          
          // Update state with ticket data
          setArrayTicket(ticketArray);
        }
      });

      return () => {
        // Clean up the Firebase listener
        fetchTickets();
      };
    }).catch((error) => {
      console.error('Error fetching user data:', error);
    });
  }, [ticketRef, username]);

  return (
    <div>
      <div style={{ overflowX: 'auto' }}>
        <table style={{ width: 'max-content' }} className="table">
          <thead>
            <tr>
              <th style={{ width: '180px' }} scope="col">Ticket No.</th>
              <th style={{ width: '100px' }} scope="col">Source</th>
              <th style={{ width: '200px' }} scope="col">Creation Date</th>
              <th style={{ width: '160px' }} scope="col">Generated By</th>
              <th style={{ width: '160px' }} scope="col">Assigned to</th>
              <th style={{ width: '200px' }} scope='col'>Concern</th>
              <th style={{ width: '160px' }} scope="col">Closed By</th>
              <th style={{ width: '200px' }} scope="col">Close Timing</th>
              <th style={{ width: '150px' }} scope='col'>Current Status</th>
              <th style={{ width: '220px' }} scope='col'>Description</th>
              <th style={{ width: '200px' }} scope='col'>RAC</th>
            </tr>
          </thead>
          <tbody className='table-group-divider'>
            {
              arrayticket.length > 0 ? (
                arrayticket.slice().reverse().map(({ ticketno, source, ticketconcern, assignto, description, assigntime, assigndate, status, closeby, closedate, closetime, rac }, index) => (
                  <tr key={index}> 
                    <td style={{ color: 'green', cursor: 'pointer' }} className="btn" data-bs-toggle="dropdown" aria-expanded="false">{ticketno}</td>
                    <ol className="dropdown-menu">
                      <li onClick={() => {
                        if (status === 'Completed') {
                          alert('Ticket is Closed');
                        } else {
                          const ticketdata = {
                            assigndate: `${assigndate} ${assigntime}`,
                            ticketconcern: ticketconcern,
                            assignto: assignto,
                            description: description,
                            ticketno: ticketno
                          }
                          navigate('modifyticket', { state: { ticket: ticketdata } });
                        }
                      }} className='dropdown-item'>Update Ticket</li>
                      <li onClick={() => {
                        const globalref = ref(db, `Global Tickets/${ticketno}`);
                        const ticketref = ref(db, `Subscriber/${username}/Tickets/${ticketno}`);

                        const data = {
                          status: 'Canceled'
                        }

                        update(globalref, data);
                        update(ticketref, data);
                      }} className='dropdown-item'>Cancel Ticket</li>
                    </ol>
                    <td>{source}</td>
                    <td>{`${assigndate} ${assigntime}`}</td>
                    <td>Shivam Chauhan</td>
                    <td>{assignto}</td>
                    <td>{ticketconcern}</td>
                    <td>{closeby}</td>
                    <td>{`${closedate} ${closetime}`}</td>
                    <td style={{ color: status === 'Completed' ? 'green' : 'red' }}>{status}</td>
                    <td>{description}</td>
                    <td>{rac}</td>
                  </tr>
                ))
              ) : (
                <td colSpan="8" style={{ textAlign: 'center' }}>No Tickets Available</td>
              )
            }
          </tbody>
        </table>
      </div>
    </div>
  );
}
